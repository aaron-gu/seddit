{"ast":null,"code":"var _jsxFileName = \"/Users/aarongu/dev/social-media/seddit-frontend/src/Feed.js\";\nimport React from 'react';\nimport { BarLoader } from 'react-spinners';\n\nclass Feed extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      fetch('http://127.0.0.1:5000/feed/').then(response => {\n        return response.json();\n      }).then(myJson => {\n        //console.log(JSON.stringify(myJson));\n        this.setState({\n          posts: myJson\n        });\n      });\n    };\n\n    this.isLoading = () => {\n      return this.state.posts == null;\n    };\n\n    this.state = {\n      posts: null\n    };\n    this.writePost = this.writePost.bind();\n  }\n\n  writePost() {\n    return React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Hello does this work\");\n  }\n\n  // componentWillUnmount(){\n  // }\n  // tick(){\n  //     this.setState({\n  //         last_updated: new Date()\n  //     });\n  // }\n  render() {\n    if (this.state.posts == null) {\n      return React.createElement(BarLoader, {\n        sizeUnit: \"px\",\n        size: 40,\n        loading: this.isLoading(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    }\n\n    const feedItems = this.state.posts['feed'].map((post, idx) => React.createElement(\"div\", {\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, post['title']), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, post['author']), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, post['created']), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, post['body']), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Like, {\n      likes: post['likes'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, feedItems, React.createElement(\"button\", {\n      className: \"btn btn-primary btn-lg\",\n      id: \"write-post\",\n      onClick: this.writePost,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Write Post\"));\n  }\n\n}\n\nclass Like extends React.Component {\n  constructor(props) {\n    super(props); // props should be the post id, and make a separate request for the number of likes on the post so it can update state\n\n    this.state = {\n      likes: 0\n    };\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    console.log('liked');\n  }\n\n  render() {\n    return React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Likes: \", this.props.likes);\n  }\n\n}\n\nexport { Feed };","map":{"version":3,"sources":["/Users/aarongu/dev/social-media/seddit-frontend/src/Feed.js"],"names":["React","BarLoader","Feed","Component","constructor","props","componentDidMount","fetch","then","response","json","myJson","setState","posts","isLoading","state","writePost","bind","render","feedItems","map","post","idx","Like","likes","handleClick","e","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {BarLoader} from 'react-spinners';\n\nclass Feed extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {posts: null};\n        this.writePost = this.writePost.bind();\n    }\n\n    writePost(){\n        return(\n            <div className=\"overlay\">Hello does this work</div>\n        );\n    }\n\n    componentDidMount = () => {\n        fetch('http://127.0.0.1:5000/feed/')\n            .then((response) => {\n                return response.json();\n            })\n            .then((myJson) => {\n                //console.log(JSON.stringify(myJson));\n                this.setState({\n                    posts: myJson\n                }) \n        });\n    }\n\n    isLoading = () => {\n        return this.state.posts == null;\n    }\n    // componentWillUnmount(){\n\n    // }\n\n    // tick(){\n\n    //     this.setState({\n    //         last_updated: new Date()\n    //     });\n    // }\n\n    render(){\n        if(this.state.posts == null){\n            return <BarLoader\n              sizeUnit={\"px\"}\n              size={40}\n              loading={this.isLoading()}\n            />\n        }\n        const feedItems = this.state.posts['feed'].map((post, idx) =>\n            <div key={idx}>\n                <h1>{post['title']}</h1>\n                <h3>{post['author']}</h3>\n                <h4>{post['created']}</h4>\n                <p>{post['body']}</p>\n                <span><Like likes={post['likes']} /></span>\n            </div>\n        );\n        \n        return (\n            <div>\n                {feedItems}\n                <button className=\"btn btn-primary btn-lg\" id=\"write-post\" onClick={this.writePost}>Write Post</button>\n            </div>\n        );\n    }\n}\n\nclass Like extends React.Component{\n    constructor(props){ \n        super(props);\n        // props should be the post id, and make a separate request for the number of likes on the post so it can update state\n        this.state = {likes: 0};\n    }\n    handleClick(e){\n        e.preventDefault();\n        console.log('liked');\n    }\n    render(){\n        return(\n            <a href=\"#\" onClick={this.handleClick}>\n                Likes: {this.props.likes}\n            </a>\n        );\n    }\n}\n\nexport {Feed};"]},"metadata":{},"sourceType":"module"}