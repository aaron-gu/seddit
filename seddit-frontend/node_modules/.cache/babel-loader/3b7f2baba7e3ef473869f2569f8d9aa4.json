{"ast":null,"code":"var _jsxFileName = \"/Users/aarongu/dev/seddit-frontend/src/Post.js\";\nimport React from 'react';\nimport { getRequest, postRequest } from './requests.js';\nimport { BarLoader } from 'react-spinners';\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isToday = someDate => {\n      const today = new Date();\n      return someDate.getDate() === today.getDate() && someDate.getMonth() === today.getMonth() && someDate.getFullYear() === today.getFullYear();\n    };\n\n    this.state = {\n      commenting: false\n    };\n    this.toggleComment = this.toggleComment.bind(this);\n  }\n\n  formatDate(date) {\n    date = new Date(date);\n    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\n\n    if (this.isToday(date)) {\n      return date.toLocaleTimeString('en-US', {\n        hour12: true,\n        hour: \"numeric\",\n        minute: \"numeric\"\n      });\n    }\n\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  }\n\n  toggleComment() {\n    if (this.props.user) this.setState({\n      commenting: !this.state.commenting\n    });else alert('Please login');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"card my-4 mx-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, this.props.author, \" \", React.createElement(\"span\", {\n      className: \"text-muted ml-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, this.formatDate(this.props.created))), React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.props.title), React.createElement(\"p\", {\n      className: \"card-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.props.body), React.createElement(Like, {\n      post_id: this.props.id,\n      user: this.props.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      role: \"button\",\n      className: \"btn btn-light card-link\",\n      onClick: this.toggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Comment\")), React.createElement(\"div\", {\n      className: \"card-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      post_id: this.props.id,\n      user: this.props.user,\n      sendComment: this.state.commenting,\n      toggleView: this.toggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass Like extends React.Component {\n  constructor(props) {\n    super(props); // props should be the post id, and make a separate request for the number of likes on the post so it can update state\n\n    this.componentDidMount = () => {\n      this.getLikes();\n      this.isLiked();\n      this.interval = setInterval(() => {\n        this.getLikes();\n        this.isLiked();\n      }, 30000);\n    };\n\n    this.state = {\n      likes: null,\n      liked: null\n    };\n    this.getLikes = this.getLikes.bind(this);\n    this.isLiked = this.isLiked.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getLikes() {\n    getRequest(\"like/\" + this.props.post_id + '/').then(response => {\n      this.setState({\n        likes: response['likes']\n      });\n    });\n  }\n\n  isLiked() {\n    if (this.props.user) {\n      postRequest('isliked/', {\n        \"user\": this.props.user,\n        \"post_id\": this.props.post_id\n      }).then(response => {\n        this.setState({\n          liked: response['liked']\n        });\n      });\n    } else {\n      this.setState({\n        liked: false\n      });\n    }\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n\n    if (!this.props.user) {\n      alert('Please login');\n      return;\n    }\n\n    if (this.state.liked) {\n      // send unlike\n      postRequest(\"unlike/\", {\n        \"user\": this.props.user,\n        \"post_id\": this.props.post_id\n      }).then(response => {\n        if (response['status'] === 'OK') {\n          this.setState({\n            likes: this.state.likes - 1,\n            liked: false\n          });\n        }\n      });\n    } else {\n      // send like\n      postRequest(\"like/\" + this.props.post_id + '/', {\n        \"user\": this.props.user,\n        \"post_id\": this.props.post_id\n      }).then(response => {\n        if (response['status'] === 'OK') this.setState({\n          likes: this.state.likes + 1,\n          liked: true\n        });\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"a\", {\n      role: \"button\",\n      className: \"btn btn-outline-light card-link\",\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.liked ? React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + '/images/like-color.svg',\n      width: \"45\",\n      height: \"30\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }) : React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + '/images/like-gray.svg',\n      width: \"45\",\n      height: \"30\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"ml-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.state.likes));\n  }\n\n}\n\nclass Comment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isLoading = () => {\n      return this.state.posts == null;\n    };\n\n    this.state = {\n      rows: 1,\n      body: \"\",\n      comments: null\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    getRequest('allcomments/' + this.props.post_id + '/').then(response => {\n      const commentsRes = response['comments'];\n      this.setState({\n        comments: commentsRes\n      });\n    });\n    this.interval = setInterval(() => {\n      getRequest('allcomments/' + this.props.post_id + '/').then(response => {\n        const commentsRes = response['comments'];\n        this.setState({\n          comments: commentsRes\n        });\n      });\n    }, 30000);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (!this.props.user) {\n      alert('Please login');\n      return;\n    }\n\n    postRequest('allcomments/' + this.props.post_id + '/', {\n      \"user\": this.props.user,\n      \"body\": this.state.body\n    }).then(response => {\n      var comment = response['comment'];\n      this.setState({\n        comments: this.state.comments.concat({\n          \"user\": comment['user'],\n          \"body\": comment['body'],\n          \"id\": comment['id']\n        })\n      });\n    });\n    this.props.toggleView();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    if (this.state.comments == null) {\n      return React.createElement(BarLoader, {\n        sizeUnit: \"px\",\n        size: 40,\n        loading: this.isLoading(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      });\n    }\n\n    var displayComments; // console.log(this.state.comments);\n\n    if (this.state.comments.length > 0) {\n      displayComments = this.state.comments.map((comment, idx) => React.createElement(\"div\", {\n        className: \"comment\",\n        key: comment['id'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, comment['user'], \":\"), \" \", comment['body'])));\n    } else {\n      displayComments = React.createElement(\"p\", {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"No comments!\");\n    }\n\n    var typeComment = this.props.sendComment ? React.createElement(\"div\", {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"w-75 col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"form-control\",\n      name: \"body\",\n      rows: this.state.rows,\n      onChange: this.handleChange,\n      placeholder: \"Comment\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"w-25 col-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-secondary\",\n      value: \"Send\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }))))) : \"\";\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, typeComment, displayComments);\n  }\n\n}\n\nexport default Post;","map":{"version":3,"sources":["/Users/aarongu/dev/seddit-frontend/src/Post.js"],"names":["React","getRequest","postRequest","BarLoader","Post","Component","constructor","props","isToday","someDate","today","Date","getDate","getMonth","getFullYear","state","commenting","toggleComment","bind","formatDate","date","getTime","getTimezoneOffset","toLocaleTimeString","hour12","hour","minute","toLocaleDateString","year","month","day","user","setState","alert","render","author","created","title","body","id","Like","componentDidMount","getLikes","isLiked","interval","setInterval","likes","liked","handleClick","post_id","then","response","e","preventDefault","process","env","PUBLIC_URL","Comment","isLoading","posts","rows","comments","handleSubmit","handleChange","commentsRes","event","comment","concat","toggleView","target","name","value","displayComments","length","map","idx","typeComment","sendComment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getRequest, postRequest } from './requests.js';\nimport {BarLoader} from 'react-spinners';\n\nclass Post extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            commenting: false\n        }\n        this.toggleComment = this.toggleComment.bind(this);\n    }\n\n    isToday = (someDate) => {\n        const today = new Date()\n        return someDate.getDate() === today.getDate() &&\n          someDate.getMonth() === today.getMonth() &&\n          someDate.getFullYear() === today.getFullYear()\n    }\n\n    formatDate(date){\n        date = new Date(date);\n        date = new Date(date.getTime() - date.getTimezoneOffset()*60000);\n        if(this.isToday(date)){\n            return date.toLocaleTimeString('en-US', {hour12: true, hour: \"numeric\", minute: \"numeric\"})\n        }\n        return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n    }\n\n    toggleComment(){\n        if(this.props.user)\n            this.setState({commenting: !this.state.commenting});\n        else\n            alert('Please login');\n    }\n\n    render(){\n        return (\n            <div className=\"card my-4 mx-md-3\">\n                <p className=\"card-header\">{this.props.author} <span className=\"text-muted ml-3\">{this.formatDate(this.props.created)}</span></p>\n                <div className=\"card-body\">\n                    <h2 className=\"card-title\">{this.props.title}</h2>\n                    <p className=\"card-text\">{this.props.body}</p>\n                    <Like post_id={this.props.id} user={this.props.user} />  \n                    <a role=\"button\" className=\"btn btn-light card-link\" onClick={this.toggleComment}>Comment</a>\n                </div>\n                <div className=\"card-footer\">\n                    <Comment post_id={this.props.id} user={this.props.user} sendComment={this.state.commenting} toggleView={this.toggleComment} />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Like extends React.Component{\n    constructor(props){ \n        super(props);\n        // props should be the post id, and make a separate request for the number of likes on the post so it can update state\n        this.state = {\n            likes: null,\n            liked: null\n        };\n        this.getLikes = this.getLikes.bind(this);\n        this.isLiked = this.isLiked.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        \n    }\n    componentDidMount = () => {\n        this.getLikes();\n        this.isLiked();\n\n        this.interval = setInterval(() => {\n            this.getLikes();\n            this.isLiked();\n        }, 30000);\n    }\n    getLikes(){\n        getRequest(\"like/\"+this.props.post_id+'/').then((response) => {\n            this.setState({likes: response['likes']})\n        });\n    }\n    isLiked(){\n        if(this.props.user){\n            postRequest('isliked/', {\"user\": this.props.user, \"post_id\": this.props.post_id}).then((response) => {\n                this.setState({liked: response['liked']});\n            });\n        } else{\n            this.setState({liked: false});\n        }\n    }\n    handleClick(e){\n        e.preventDefault();\n\n        if(!this.props.user){\n            alert('Please login');\n            return;\n        }\n\n        if(this.state.liked){ // send unlike\n            postRequest(\"unlike/\", {\"user\": this.props.user, \"post_id\": this.props.post_id}).then((response) => {\n                if(response['status'] === 'OK'){\n                    this.setState({\n                        likes: this.state.likes - 1,\n                        liked: false\n                    });\n                }\n                    \n            });\n        } else{ // send like\n            postRequest(\"like/\" + this.props.post_id + '/', \n                {\"user\": this.props.user, \"post_id\": this.props.post_id}\n            ).then((response) => {\n                if(response['status'] === 'OK')\n                    this.setState({\n                        likes: this.state.likes + 1,\n                        liked: true\n                    });\n            });\n        }\n    }\n    render(){\n        return(\n            <a role=\"button\" className=\"btn btn-outline-light card-link\" onClick={this.handleClick}>\n                {this.state.liked ? \n                <img src={process.env.PUBLIC_URL + '/images/like-color.svg'} width=\"45\" height=\"30\" alt=\"\" /> :\n                <img src={process.env.PUBLIC_URL + '/images/like-gray.svg'} width=\"45\" height=\"30\" alt=\"\" /> }\n                <span className=\"ml-1\">{this.state.likes}</span>\n            </a>\n        );\n    }\n}\n\nclass Comment extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            rows: 1,\n            body: \"\",\n            comments: null\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount(){\n        getRequest('allcomments/' + this.props.post_id + '/').then((response) => {\n            const commentsRes = response['comments'];\n            this.setState({comments: commentsRes})\n        });\n\n        this.interval = setInterval(() => {\n            getRequest('allcomments/' + this.props.post_id + '/').then((response) => {\n                const commentsRes = response['comments'];\n                this.setState({comments: commentsRes})\n            });\n        }, 30000);\n    }\n    handleSubmit(event){\n        event.preventDefault();\n\n        if(!this.props.user){\n            alert('Please login');\n            return;\n        }\n\n        postRequest('allcomments/' + this.props.post_id + '/', \n            {\"user\": this.props.user, \"body\": this.state.body}\n        ).then((response) => {\n            var comment = response['comment'];\n            this.setState({comments: this.state.comments.concat({\n                    \"user\": comment['user'], \"body\": comment['body'], \"id\": comment['id']\n                })\n            });\n        });\n\n        this.props.toggleView();\n    }\n    handleChange(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    isLoading = () => {\n        return this.state.posts == null;\n    }\n\n    render(){\n            if(this.state.comments == null){\n                return <BarLoader\n                    sizeUnit={\"px\"}\n                    size={40}\n                    loading={this.isLoading()}\n                />\n            }\n            var displayComments;\n            // console.log(this.state.comments);\n            if(this.state.comments.length > 0){\n                displayComments = this.state.comments.map((comment, idx) =>\n                    <div className=\"comment\" key={comment['id']}>\n                        <p><b>{comment['user']}:</b> {comment['body']}</p>\n                    </div>\n                );\n            } else {\n                displayComments = (\n                    <p className=\"text-muted\">No comments!</p>\n                );\n            }\n            var typeComment = this.props.sendComment ? \n                <div className=\"mb-3\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-row\">\n                        <div className=\"w-75 col-auto\">\n                        <textarea className=\"form-control\" name=\"body\" rows={this.state.rows} onChange={this.handleChange} placeholder=\"Comment\" required ></textarea>\n                        </div>\n                        <div className=\"w-25 col-auto\">\n                        <input type=\"submit\" className=\"btn btn-secondary\" value=\"Send\" />\n                        </div>\n                    </div>\n                </form>\n                </div>\n                : \"\";\n            return(\n                <div>\n                    {typeComment}\n                    {displayComments}\n                </div>\n            );\n        \n    }\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}